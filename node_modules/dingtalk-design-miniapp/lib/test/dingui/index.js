"use strict";

Page({
  data: {
    activedm: 0,
    activeIndexN: 0,
    data: {
      name: 1
    },
    value: '',
    radioLists: [{
      itemName: '单行列表1',
      value: 'single1',
      data: {
        test: 1
      }
    }, {
      itemName: '单行列表2',
      value: 'single2'
    }, {
      itemName: '单行列表3',
      value: 'single3'
    }],
    defaultValue: ['single1', 'single4'],
    checkboxListsId: 'demotest',
    checkboxLists: [{
      itemName: '标题文案',
      value: 'single1',
      disabled: true
    }, {
      data: {
        test: 1
      },
      itemName: '标题文案',
      value: 'single2',
      disabled: true
    }, {
      itemName: '标题文案',
      value: 'single3'
    }, {
      itemName: '标题文案',
      value: 'single4'
    }, {
      itemName: '标题文案',
      value: 'single5'
    }],
    nModal: false,
    slotButtonList: [{
      name: '单个按钮'
    }]
  },
  onLoad: function onLoad() {},
  onReset: function onReset() {
    console.log('onReset');
  },
  onSubmit: function onSubmit() {
    console.log('onSubmit');
  },
  onDmTap: function onDmTap(e, comp) {
    console.log('已废弃方法，兼容性测试, onDmTap', e, comp);
  },
  onDmCatchTap: function onDmCatchTap(e, comp) {
    console.log('已废弃方法，兼容性测试, onDmCatchTap', e, comp);
  },
  onDmTapDisabled: function onDmTapDisabled(e, comp) {
    console.log('已废弃方法，兼容性测试, onDmTapDisabled', e, comp);
  },
  onDmItemTap: function onDmItemTap(index) {
    console.log('废弃onDmItemTap', index);
    this.setData({
      activedm: index
    });
  },
  onDmDisabledItemTap: function onDmDisabledItemTap(index) {
    console.log('废弃onDmDisabledItemTap', index);
  },
  onDmTabItemTap: function onDmTabItemTap(index) {
    console.log('已废除onDmItemTap', index);
    this.setData({
      activeIndexN: index
    });
  },
  onDmChange: function onDmChange(checked, data) {
    console.error("onDmChange", checked, data);
  },
  onDmClose: function onDmClose(data) {
    console.error("onDmClose", data);
  },
  onDmListTap: function onDmListTap(dmId, e, comp) {
    console.log('%c onDmTap [ dmId, e, comp ]', 'font-size:13; background:pink; color: #bf2c9f;', dmId, e, comp);
  },
  onDmListChange: function onDmListChange(data, e, comp) {
    console.log('%c onDmChange [ data, e, comp ]', 'font-size:13; background:pink; color:#bf2c9f;', data, e, comp);
  },
  onDmArrowCatchClick: function onDmArrowCatchClick(dmId, e, comp) {
    console.log('%c onDmArrowCatchClick [ dmId, e, comp ]', 'font-size:13; background:pink; color:#bf2c9f;', dmId, e, comp);
  },
  onDmContentCatchClick: function onDmContentCatchClick(dmId, e, comp) {
    console.log('%c onDmContentCatchClick [ dmId, e, this ]', 'font-size:13; background:pink; color:#bf2c9f;', dmId, e, comp);
  },
  onDmThumbCatchClick: function onDmThumbCatchClick(dmId, e, comp) {
    console.log('%c onDmThumbCatchClick [ dmId, e, comp ]', 'font-size:13; background:pink; color:#bf2c9f;', dmId, e, comp);
  },
  onDmArrowClick: function onDmArrowClick(dmId, e, comp) {
    console.log('%c onDmArrowClick [ dmId, e, comp ]', 'font-size:13; background:pink; color:#bf2c9f;', dmId, e, comp);
  },
  onDmContentClick: function onDmContentClick(dmId, e, comp) {
    console.log('%c onDmContentClick [ dmId, e, comp ]', 'font-size:13; background:pink; color:#bf2c9f;', dmId, e, comp);
  },
  onDmThumbClick: function onDmThumbClick(dmId, e, comp) {
    console.log('%c onDmThumbClick [ dmId, e, comp ]', 'font-size:13; background:pink; color:#bf2c9f;', dmId, e, comp);
  },
  onDmEmptyLinkTap: function onDmEmptyLinkTap(e, comp) {
    console.log('onDmEmptyLinkTaponDmEmptyLinkTap', e, comp);
  },
  onDmEmptyBtnTap: function onDmEmptyBtnTap(e, comp) {
    console.log('onDmEmptyBtnTap', e, comp);
  },
  onDmSwitchChange: function onDmSwitchChange(e) {
    console.log(e, '废弃属性 onDmChange');
    if (e.wsData == 'changeChecked') {
      this.setData({
        checked: e.checked
      });
    }
  },
  onDmValidate: function onDmValidate(value, comp) {
    console.log('onDmValidate', value, comp);
    if (value.length >= 5) {
      return true;
    } else {
      return false;
    }
  },
  clearHandler: function clearHandler(e, comp) {
    console.log('onDmClear', e, comp);
  },
  inputHandler: function inputHandler(e, comp) {
    console.log('onDmInput', e, comp);
  },
  blurHandler: function blurHandler(e, comp) {
    console.log('onDmBlur', e, comp);
  },
  onDmFocus: function onDmFocus(e, comp) {
    console.log('onDmFocus', e, comp);
  },
  onDmConfirm: function onDmConfirm(e, comp) {
    console.log('onDmConfirm', e, comp);
  },
  onDmBlur: function onDmBlur(e, comp) {
    console.error('onDmBlur', e, comp);
  },
  onDmSubmit: function onDmSubmit(e, comp) {
    console.error('onDmSubmit', e, comp);
  },
  onDmClear: function onDmClear(e, comp) {
    console.error('onDmClear', e, comp);
  },
  onDmInput: function onDmInput(data, comp) {
    console.error('onDmInput', data, comp);
  },
  onDmRGChange: function onDmRGChange(val, idx, data, t) {
    console.log(val, idx, data);
  },
  onDmRGExtraClick: function onDmRGExtraClick(val, idx, data, t) {
    console.log(val, idx);
  },
  onDmExtraClick: function onDmExtraClick(data, index, comp, isChecked) {
    console.log("on Dm Extra Click", data, index, comp, isChecked);
  },
  onDmRIChange: function onDmRIChange(data, index, comp, isChecked) {
    console.log("on Dm Extra Click", data, index, comp, isChecked);
  },
  onDmCChange: function onDmCChange() {
    console.log('onDmCChange');
  },
  onDmCGChange: function onDmCGChange(val, currVal, currIdx, data) {
    console.log('%c onDmChange [ val, currVal, currIdx, data ]', 'font-size:13; background:pink; color:#bf2c9f;', val, currVal, currIdx, data);
  },
  onDmCIChange: function onDmCIChange(data, index, t) {
    console.log('%c onDmChange [ data, index, t ]', 'font-size:13; background:pink; color:#bf2c9f;', data, index, t);
  },
  onDmCIExtraClick: function onDmCIExtraClick(data, index, comp, selected) {
    console.log('%c onDmExtraClick [ data, index, comp, selected ]', 'font-size:13; background:pink; color:#bf2c9f;', data, index, comp, selected);
  },
  onNTap: function onNTap() {
    this.setData({
      nModal: true
    });
  },
  onDmBtnTap: function onDmBtnTap(e, self) {
    this.setData({
      nModal: false
    });
    console.log('废弃onDmBtnTap', e, self);
  }
});