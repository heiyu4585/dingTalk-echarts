"use strict";

Component({
  data: {
    opaReduceWrap: ''
  },
  props: {
    className: '',
    min: 0,
    max: 9999,
    canEdit: false,
    value: 0,
    step: 1,
    actionType: 'default',
    disabled: false,
    onDmChange: function onDmChange() {}
  },
  didMount: function didMount() {
    var _this$props = this.props,
      value = _this$props.value,
      min = _this$props.min,
      max = _this$props.max,
      actionType = _this$props.actionType,
      disabled = _this$props.disabled;
    var opaReduceWrap;
    if (actionType == 'min-hide') {
      opaReduceWrap = value == min ? 'dm-stepper-ismin' : '';
    }
    this.setData({
      value: Math.min(Math.max(min, value), max),
      disabled: min == max || disabled,
      opaReduceWrap: opaReduceWrap
    });
  },
  didUpdate: function didUpdate(preProps, preData) {
    var _this$props2 = this.props,
      value = _this$props2.value,
      min = _this$props2.min,
      max = _this$props2.max,
      actionType = _this$props2.actionType,
      disabled = _this$props2.disabled;
    var opaReduceWrap;
    if (preProps.value !== this.props.value) {
      if (actionType == 'min-hide') {
        opaReduceWrap = value == min ? 'dm-stepper-ismin' : '';
      }
      this.setData({
        value: Math.min(Math.max(min, value), max),
        disabled: min == max || disabled,
        opaReduceWrap: opaReduceWrap
      });
    }
  },
  methods: {
    changeFn: function changeFn(ev, comp) {
      var _this$props3 = this.props,
        min = _this$props3.min,
        max = _this$props3.max,
        onDmChange = _this$props3.onDmChange,
        disabled = _this$props3.disabled,
        step = _this$props3.step,
        actionType = _this$props3.actionType;
      var evType = comp.props.dataType;
      var _this$data = this.data,
        value = _this$data.value,
        opaReduceWrap = _this$data.opaReduceWrap;
      var preValue = value;
      if (!disabled) {
        if (evType === 'reduce') {
          if (value > min) {
            value = Math.max(min, value - step);
          }
        } else if (value < max) {
          value = Math.min((isNaN(value) ? 0 : value - 0) + (step - 0), max);
        }
        if (actionType == 'min-hide') {
          opaReduceWrap = value == min ? 'dm-stepper-ismin' : '';
        }
        this.setData({
          value: value,
          opaReduceWrap: opaReduceWrap
        });
        onDmChange(value, preValue, this);
      }
    },
    inputFn: function inputFn(ev) {
      this.setData({
        value: ev.detail.value
      });
    },
    resetFn: function resetFn(ev) {
      var _this$props4 = this.props,
        max = _this$props4.max,
        min = _this$props4.min,
        onDmChange = _this$props4.onDmChange;
      var value = ev.detail.value;
      var calculatedVal = value;
      var preValue = this.data.value;
      if (value > max) {
        calculatedVal = max;
      } else if (value < min) {
        calculatedVal = min;
      }
      this.setData({
        value: calculatedVal
      });
      onDmChange(calculatedVal, preValue, this);
    }
  }
});