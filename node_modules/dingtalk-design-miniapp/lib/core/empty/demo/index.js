"use strict";

var _config = require("./config");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var emptyData = _config.TypeConfig.getTypesMap().map(function (item) {
  return {
    type: item,
    define: _config.TypeConfig.getTypeConfig(item).define
  };
});
Page({
  data: {
    activeRadio: 'default',
    emptyDefines: [],
    emptyTypes: [],
    locale: '',
    emptyData: [{
      type: 'default',
      define: '通用',
      img: {
        light: 'https://gw.alicdn.com/imgextra/i2/O1CN011HOE9F1MSMDNTAzAz_!!6000000001433-2-tps-360-360.png',
        dark: 'https://gw.alicdn.com/imgextra/i2/O1CN011HOE9F1MSMDNTAzAz_!!6000000001433-2-tps-360-360.png'
      },
      title: '主标题文字说明',
      describe: '辅助文案不超过两行，一行不超过14字，<br/>不带有任何句末标点（感叹号、波浪线）',
      btnText: '功能主要',
      btnType: ''
    }].concat(_toConsumableArray(emptyData))
  },
  onLoad: function onLoad() {
    var emptyData = this.data.emptyData;
    var emptyDefines = emptyData.map(function (item) {
      return item.define;
    });
    var emptyTypes = emptyData.map(function (item) {
      return item.type;
    });
    this.setData({
      emptyDefines: emptyDefines,
      emptyTypes: emptyTypes
    });
  },
  onBtnTap: function onBtnTap(e) {
    console.log('on tap', e);
  },
  onRadioChange: function onRadioChange(e) {
    this.setData({
      activeRadio: e.detail.value
    });
  },
  onChangeLang: function onChangeLang() {
    var locale = this.data.locale;
    this.setData({
      locale: locale === 'en_US' ? 'zh_CN' : 'en_US'
    });
  }
});