"use strict";

Component({
  timeId: 0,
  data: {
    $uiName: 'tooltips',
    $cssName: 'dm-tooltips',
    visible: false,
    disappear: true,
    textWidth: undefined,
    arrowOffset: 0
  },
  props: {
    placement: 'top',
    //  top left right bottom topLeft topRight bottomLeft bottomRight leftTop leftBottom rightTop rightBottom
    visible: false,
    className: '',
    textWidth: undefined,
    //  tooltips 中文案文字宽度（最大480，可以用于控制显示行数）
    slotWidth: 0,
    //  tooltips 包住的内容区域宽度（用于三角标定位到正中）
    animate: false,
    //  是否开启动画，默认否
    onDmClose: function onDmClose() {}
  },
  didMount: function didMount() {
    var _this = this;
    //  优化，支持回调
    this.adjustArrowOffset(function (_ref) {
      var arrowOffset = _ref.arrowOffset;
      var data = {
        visible: _this.props.visible,
        disappear: !_this.props.visible,
        arrowOffset: arrowOffset
      };
      _this.setData(data);
    });
  },
  didUpdate: function didUpdate(preProps) {
    var _this2 = this;
    // 显示位置，内容尺寸，文本尺寸未发生变化时
    var hasChanged = {
      placement: preProps.placement !== this.props.placement,
      slotWidth: preProps.slotWidth !== this.props.slotWidth,
      textWidth: preProps.textWidth !== this.props.textWidth
    };
    if (hasChanged.placement || hasChanged.slotWidth || hasChanged.textWidth) {
      // console.log({hasChanged})
      this.adjustArrowOffset(function (_ref2) {
        var arrowOffset = _ref2.arrowOffset;
        _this2.setData({
          arrowOffset: arrowOffset
        });
      });
    }
    var from = preProps.visible;
    var to = this.props.visible;
    // console.log({from,to})
    //  防止更新过程中 props 反复传入(导致状态会强制和props一致)
    if (from === to) {
      return false;
    }
    this.toggleDisplay(to);
  },
  methods: {
    onDmCloseHook: function onDmCloseHook() {
      var _this3 = this;
      // this.setData({ visible: false }, () => false&&)
      this.toggleDisplay(false, function () {
        return _this3.props.onDmClose();
      });
    },
    toggleDisplay: function toggleDisplay() {
      var _this4 = this;
      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var callback = arguments.length > 1 ? arguments[1] : undefined;
      if (visible === this.data.visible) {
        return false;
      }
      // console.log('toggleDisplay',{from:this.data.visible,to:visible},)
      if (visible) {
        //  hidden -> show（需先恢复节点） 
        this.setData({
          disappear: false
        }, function () {
          clearTimeout(_this4.timeId);
          _this4.timeId = setTimeout(function () {
            return _this4.setData({
              visible: true
            }, function () {
              return callback && callback();
            });
          }, 50);
        });
      } else {
        //  show - hidden（动画结束后删除节点） 
        this.setData({
          visible: visible
        }, function () {
          clearTimeout(_this4.timeId);
          _this4.timeId = setTimeout(function () {
            return _this4.setData({
              disappear: true
            }, function () {
              return callback && callback();
            });
          }, 650);
        });
      }
    },
    adjustArrowOffset: function adjustArrowOffset(callback) {
      var placement = this.props.placement;
      var slotWidth = this.props.slotWidth;
      var isCenter = ['left', 'right', 'top', 'bottom'].indexOf(placement) > -1;
      if (isCenter) {
        return callback({
          arrowOffset: 0
        });
      }
      //  判断是否没有移动

      var multiplier = placement.indexOf('Left') > -1 ? -1 : 1; //  减掉 arrow 宽度的一般 ， 最多是标题文本的 50% 宽度（超过了就该换边啦）
      var arrowOffset = Math.min(Math.max(Math.floor(slotWidth / 2 - 12), 5), Math.floor(this.props.textWidth / 2)) * multiplier;
      return callback({
        arrowOffset: arrowOffset
      });
    }
  }
});