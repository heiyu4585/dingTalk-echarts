"use strict";

Component({
  mixins: [],
  data: {
    $uiName: 'modal',
    activeIndex: -1,
    innerInputValue: '',
    hasValue: false
  },
  props: {
    style: '',
    className: '',
    show: true,
    topImage: '',
    topImageSize: '',
    // large || small
    title: '',
    describe: '',
    hasInput: false,
    inputValue: '',
    inputPlaceholder: '',
    inputType: 'text',
    inputDisabled: false,
    inputFocus: false,
    inputMaxlength: 140,
    avatarInfo: {},
    // {avatar:'',nick:''}
    buttonList: [],
    // { name:"", isMainEvent: "", isWaringEvent: ""}
    onBtnTap: null,
    onInput: null,
    onInputClear: null,
    disableScroll: true
  },
  didMount: function didMount() {
    var inputValue = this.props.inputValue;
    this.setData({
      hasValue: !!inputValue.length,
      innerInputValue: inputValue
    });
  },
  didUpdate: function didUpdate(prevProps, prevData) {
    var _this$props = this.props,
      hasInput = _this$props.hasInput,
      inputDisabled = _this$props.inputDisabled,
      inputFocus = _this$props.inputFocus;
    var changeData = {};
    var hasChaged = false;
    if (inputDisabled !== prevData.inputDisabled) {
      changeData.inputDisabled = inputDisabled;
      hasChaged = true;
    }
    if (inputFocus !== prevData.inputFocus) {
      changeData.inputFocus = inputFocus;
      hasChaged = true;
    }
    if (hasInput && hasChaged) {
      this.setData(changeData);
    }
  },
  didUnmount: function didUnmount() {},
  methods: {
    setInputValue: function setInputValue(val) {
      var _this = this;
      this.setData({
        innerInputValue: this.currentInputValue
      }, function () {
        _this.setData({
          innerInputValue: val,
          hasValue: val && val.length
        });
      });
    },
    onTap: function onTap(e) {
      var _this$props2 = this.props,
        onBtnTap = _this$props2.onBtnTap,
        onDmBtnTap = _this$props2.onDmBtnTap;
      if (onBtnTap) {
        onBtnTap(e);
        return;
      }
      onDmBtnTap && onDmBtnTap(e, this);
    },
    onDmClearHook: function onDmClearHook(e) {
      var _this2 = this;
      var _this$props3 = this.props,
        inputDisabled = _this$props3.inputDisabled,
        onDmClear = _this$props3.onDmClear,
        onInputClear = _this$props3.onInputClear;
      if (inputDisabled) {
        return;
      }
      if (onInputClear) {
        onInputClear(e);
      } else if (onDmClear) {
        onDmClear(e, this);
      }
      this.setData({
        innerInputValue: this.currentInputValue
      }, function () {
        _this2.setData({
          innerInputValue: '',
          hasValue: false,
          inputFocus: true
        });
      });
    },
    onDmInputHook: function onDmInputHook(e) {
      var _this$props4 = this.props,
        onDmInput = _this$props4.onDmInput,
        onInput = _this$props4.onInput;
      if (onInput) {
        onInput(e);
      } else if (onDmInput) {
        onDmInput(e, this);
      }
      this.currentInputValue = e.detail.value;
      this.setData({
        hasValue: !!this.currentInputValue.length
      });
    },
    onDmBtnTouchStart: function onDmBtnTouchStart(e) {
      var currIndex = e && e.target && e.target.dataset && e.target.dataset.index;
      this.setData({
        activeIndex: currIndex
      });
    },
    onDmBtnTouchEnd: function onDmBtnTouchEnd(e) {
      this.setData({
        activeIndex: -1
      });
    },
    onDmBtnTouchCancel: function onDmBtnTouchCancel(e) {
      this.setData({
        activeIndex: -1
      });
    }
  }
});