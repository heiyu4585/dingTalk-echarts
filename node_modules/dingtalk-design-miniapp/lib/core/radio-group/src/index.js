"use strict";

Component({
  mixins: [],
  data: {
    $uiName: 'radio-group',
    radioListsData: [],
    disabledChecked: false
  },
  props: {
    className: '',
    radioLists: [],
    radioListsId: '',
    defaultValue: '',
    disabled: '',
    value: '',
    hasArrowIcon: false,
    onChange: null,
    onExtraTap: null,
    onDmExtraClick: null,
    onDmChange: null,
    allowNull: false
  },
  didMount: function didMount() {
    this.initData();
  },
  didUpdate: function didUpdate(preProps) {
    var _this$props = this.props,
      radioListsId = _this$props.radioListsId,
      defaultValue = _this$props.defaultValue,
      value = _this$props.value;
    if (preProps.radioListsId !== radioListsId || defaultValue !== preProps.defaultValue || value !== preProps.value) {
      this.initData();
    }
  },
  didUnmount: function didUnmount() {},
  methods: {
    initData: function initData() {
      var _this$props2 = this.props,
        radioLists = _this$props2.radioLists,
        defaultValue = _this$props2.defaultValue,
        value = _this$props2.value,
        allowNull = _this$props2.allowNull;
      if (!radioLists.length) {
        return;
      }

      // 如果没有被选中的，先和 defaultValue 比较看有没有默认被选中的，如果都没有没有则选中第一个
      var checkedLists = radioLists.filter(function (item) {
        item.isChecked = false;
        return item.value === (value || defaultValue);
      });
      if (checkedLists.length) {
        checkedLists[0].isChecked = true;
      } else {
        // 如果都没有没有则选中第一个且不允许空值
        if (!allowNull) {
          radioLists[0].isChecked = true;
          checkedLists = radioLists[0];
        }
      }
      this.setData({
        radioListsData: radioLists
      });
    },
    getRadioCheck: function getRadioCheck(index) {
      return this.data.radioListsData[index];
    },
    setRadioCheck: function setRadioCheck(index) {
      var radioListsData = this.data.radioListsData;
      var disabled = this.props.disabled;
      var currData = this.getRadioCheck(index);
      if (disabled || currData.disabled || currData.isChecked) {
        return;
      }
      radioListsData.forEach(function (item, idx) {
        if (index === idx) {
          item.isChecked = !item.isChecked;
        } else {
          item.isChecked = false;
        }
      });
      this.setData({
        radioListsData: radioListsData
      });
    },
    onItemChange: function onItemChange(index) {
      this.setRadioCheck(index);
      var onChange = this.props.onChange;
      if (onChange) {
        onChange(index);
      }
    },
    onItemExtraTap: function onItemExtraTap(index) {
      var onExtraTap = this.props.onExtraTap;
      if (onExtraTap) {
        onExtraTap(index);
      }
    },
    onDmChange: function onDmChange(data, index, t) {
      var onDmChange = this.props.onDmChange;
      this.setRadioCheck(index);
      if (onDmChange) {
        onDmChange(this.getRadioCheck(index).value, index, data, t, this);
      }
    },
    onDmExtraClick: function onDmExtraClick(data, index, t) {
      this.props.onDmExtraClick && this.props.onDmExtraClick(this.props.radioLists[index].value, index, data, t, this);
    }
  }
});