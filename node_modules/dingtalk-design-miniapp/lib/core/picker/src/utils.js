"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fmtEvent = fmtEvent;
exports.getMatchedItemByIndex = getMatchedItemByIndex;
exports.getMatchedItemByValue = getMatchedItemByValue;
exports.getStrictMatchedItemByValue = getStrictMatchedItemByValue;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function getColumnValue(columnItem) {
  if (_typeof(columnItem) === 'object') return columnItem.value;
  return columnItem;
}
function getStrictMatchedItemByValue(columns, value, single) {
  if (single) {
    value = [value];
  }
  var matchedValues = [];
  var matchedColumn = [];
  var index = null;
  var _loop = function _loop() {
    var column = columns[i];
    var compareValue = value[i];
    index = column.findIndex(function (c) {
      var columnValue = getColumnValue(c);
      return columnValue === compareValue;
    });
    matchedColumn[i] = column[index];
    matchedValues[i] = getColumnValue(column[index]);
  };
  for (var i = 0; i < columns.length; i++) {
    _loop();
  }
  return {
    matchedColumn: single ? matchedColumn[0] : matchedColumn,
    matchedValues: single ? matchedValues[0] : matchedValues
  };
}

// 如果找不到value对应的item项目，返回第一项
function getMatchedItemByValue(columns, value, single) {
  if (single) {
    value = [value];
  }
  var matchedValues = [];
  var matchedColumn = [];
  var index = null;
  var _loop2 = function _loop2() {
    var column = columns[i];
    var compareValue = value[i];
    if (compareValue === undefined || compareValue === null) {
      index = 0;
    } else {
      index = column.findIndex(function (c) {
        var columnValue = getColumnValue(c);
        return columnValue === compareValue;
      });
      if (index === -1) {
        index = 0;
      } // 没有找到， 默认选择第一个
    }

    matchedColumn[i] = column[index];
    matchedValues[i] = getColumnValue(column[index]);
  };
  for (var i = 0; i < columns.length; i++) {
    _loop2();
  }
  return {
    matchedColumn: single ? matchedColumn[0] : matchedColumn,
    matchedValues: single ? matchedValues[0] : matchedValues
  };
}
function getMatchedItemByIndex(columns, selectedIndex, single) {
  var matchedValues = [];
  var matchedColumn = [];
  var index = null;
  for (var i = 0; i < columns.length; i++) {
    var column = columns[i];
    var compareValue = selectedIndex[i];
    index = null;
    if (compareValue === undefined || compareValue === null) {
      index = 0;
    } else {
      index = compareValue;
      // 当column变化时， picker-view onChange 里抛出来的selectedIndex有可能不正确
      if (columns && columns[i] && columns[i][compareValue] === undefined) {
        index = 0;
      }
      if (index === -1) {
        index = 0;
      } // 没有找到， 默认选择第一个
    }

    matchedColumn[i] = column[index];
    matchedValues[i] = getColumnValue(column[index]);
  }
  return {
    matchedColumn: single ? matchedColumn[0] : matchedColumn,
    matchedValues: single ? matchedValues[0] : matchedValues
  };
}
function fmtEvent(props, e) {
  var dataset = {};
  for (var key in props) {
    if (/data-/gi.test(key)) {
      dataset[key.replace(/data-/gi, '')] = props[key];
    }
  }
  return Object.assign({}, e, {
    currentTarget: {
      dataset: dataset
    },
    target: {
      dataset: dataset,
      targetDataset: dataset
    }
  });
}