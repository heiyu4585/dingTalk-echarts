"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
Page({
  data: {
    primLargeLoading: false,
    defLargeLoading: false,
    danLargeLoading: false,
    primSmallLoading: false,
    primDefLoading: false,
    data: {
      name: 'xixi',
      age: '19'
    }
  },
  setLoading: function setLoading(type, e, data) {
    var _this = this;
    this.setData(_defineProperty({}, type, !this.data[type]), function () {
      setTimeout(function () {
        _this.setData(_defineProperty({}, type, !_this.data[type]));
      }, 2000);
    });
  },
  onPrimLargeTap: function onPrimLargeTap(e, data) {
    console.log('onCatchTap', e, data);
    this.setLoading('primLargeLoading', e, data);
  },
  onDefLargeTap: function onDefLargeTap(e, data) {
    this.setLoading('defLargeLoading', e, data);
  },
  onDanLargeTap: function onDanLargeTap(e, data) {
    console.log('onTap', e, data);
    this.setLoading('danLargeLoading', e, data);
  },
  onPrimSmallTap: function onPrimSmallTap(e, data) {
    this.setLoading('primSmallLoading', e, data);
  },
  onPriDefTap: function onPriDefTap(e, data) {
    this.setLoading('primDefLoading', e, data);
  },
  onReset: function onReset() {
    console.log('onReset');
  },
  onSubmit: function onSubmit() {
    console.log('onSubmit');
  }
});