"use strict";

Component({
  mixins: [],
  data: {
    $uiName: 'input',
    focus: false,
    valueholder: ''
  },
  props: {
    className: '',
    style: '',
    vertical: true,
    id: '',
    name: '',
    title: '标题文字',
    maxlength: '',
    autoHeight: true,
    placeholder: '',
    autoClear: false,
    value: '',
    type: 'text',
    // 类型 text | multiline | number | password
    disabled: false,
    errorText: '',
    focus: false,
    required: false,
    readOnly: false,
    rightIconSize: '32',
    rightIconType: '',
    onBlur: null,
    onCheckValidate: null,
    onInput: null,
    onFocus: null,
    onTap: null,
    onConfirm: null,
    onClear: null
  },
  didMount: function didMount() {
    this.setData({
      valueholder: this.props.value
    });
  },
  didUpdate: function didUpdate(prevProps, prevData) {
    if (this.props.focus !== prevProps.focus && this.props.focus !== this.data.focus) {
      this.setData({
        focus: this.props.focus
      });
    }
    if (this.props.value !== prevProps.value && this.props.value !== this.data.valueholder) {
      this.setData({
        valueholder: this.props.value
      });
    }
    if (this.props.errorText !== prevProps.errorText && this.props.errorText !== this.data.errorText) {
      this.setData({
        errorText: this.props.errorText
      });
    }
  },
  methods: {
    onValidate: function onValidate(value, type) {
      var _this$props = this.props,
        onDmValidate = _this$props.onDmValidate,
        onCheckValidate = _this$props.onCheckValidate;
      var errorText = '';
      var error;
      if (type === 'focus' && value || type !== 'focus') {
        if (onCheckValidate) {
          errorText = onCheckValidate(value);
        } else if (onDmValidate) {
          error = !onDmValidate(value, this.props);
        }
      }
      this.setData({
        focus: error || !!errorText,
        error: error,
        errorText: errorText
      });
    },
    onInputBlur: function onInputBlur(e) {
      var _this$props2 = this.props,
        onDmBlur = _this$props2.onDmBlur,
        onBlur = _this$props2.onBlur;
      var value = e.detail.value;
      this.onValidate(value, 'blur');
      if (onBlur) {
        onBlur(e);
      } else if (onDmBlur) {
        onDmBlur(e, this);
      }
    },
    onItemInput: function onItemInput(e) {
      var _this$props3 = this.props,
        onDmInput = _this$props3.onDmInput,
        onInput = _this$props3.onInput;
      var value = e.detail.value;
      this.setData({
        valueholder: value
      });
      if (onInput) {
        onInput(e);
      } else if (onDmInput) {
        onDmInput(e, this);
      }
    },
    onItemFocus: function onItemFocus(e) {
      var _this$props4 = this.props,
        onDmFocus = _this$props4.onDmFocus,
        onFocus = _this$props4.onFocus;
      var value = e.detail.value;
      this.onValidate(value, 'focus');
      if (onFocus) {
        onFocus(e);
      } else if (onDmFocus) {
        onDmFocus(e, this);
      }
    },
    onItemTap: function onItemTap(e) {
      var _this$props5 = this.props,
        onDmTap = _this$props5.onDmTap,
        onTap = _this$props5.onTap;
      if (onTap) {
        onTap(e);
      } else if (onDmTap) {
        onDmTap(e, this);
      }
    },
    onItemConfirm: function onItemConfirm(e) {
      var _this$props6 = this.props,
        onDmConfirm = _this$props6.onDmConfirm,
        onConfirm = _this$props6.onConfirm;
      if (onConfirm) {
        onConfirm(e);
      } else if (onDmConfirm) {
        onDmConfirm(e, this);
      }
    },
    onItemClear: function onItemClear(e) {
      var _this$props7 = this.props,
        onClear = _this$props7.onClear,
        onDmClear = _this$props7.onDmClear;
      this.setData({
        value: '',
        valueholder: ''
      });
      if (onClear) {
        onClear(e);
      } else if (onDmClear) {
        onDmClear(e, this);
      }
    }
  }
});