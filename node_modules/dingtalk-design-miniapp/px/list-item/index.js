"use strict";

Component({
  mixins: [],
  data: {
    $uiName: 'list-item',
    checked: false
  },
  props: {
    className: '',
    style: '',
    captionClassName: '',
    // 控制标题样式
    dmId: '',
    // 已废弃
    id: '',
    disabled: false,
    required: false,
    error: false,
    // 已废弃
    errorText: '',
    //checkbox配置
    checkable: false,
    // 是否显示checkbox
    checked: null,
    // 默认选中状态
    defaultChecked: null,
    // 非受控组件 初始化值
    indeterminate: false,
    // 尚未明确是否选中状态

    //thumb
    hasAvatar: false,
    avatarInfo: {},
    // {userId, openId, uid, nickName, avatar, size, shape } 同 open-avatar api
    thumbClassName: '',
    thumbSize: 'standard',
    // mini(48rpx)、standard(72rpx)、big(96rpx)、large(112rpx)   small large  ？？？？？
    thumbType: 'circle',
    // circle、square
    thumbUrl: '',
    thumbVTop: false,
    thumbContent: '',
    // thumbUrl为空时，用thumbContent拼接头像  已废弃  有openavatar

    //extra
    extraClassName: '',
    extraVTop: false,
    extraText: '',
    //badge
    badgeShow: false,
    badgeText: '',
    // arrow
    arrowClassName: '',
    arrowType: '',
    //icon的type
    arrowSize: 'small',
    //查看wings-icon的size

    // brief
    briefClassName: '',
    briefList: [],
    //border-bottom

    hasborder: false,
    // 强制设置 border  用于设置最后一个   先不暴露
    noborder: false,
    //强制隐藏 border

    onTap: null,
    onChange: null,
    onArrowCatchTap: null,
    onArrowTap: null,
    onContentCatchTap: null,
    onContentTap: null,
    onThumbCatchTap: null,
    onThumbTap: null,
    onDmTap: null,
    onDmChange: null,
    onDmArrowClick: null,
    // 箭头点击事件
    onDmArrowCatchClick: null,
    // catch箭头点击事件
    onDmContentClick: null,
    // 内容区域点击事件
    onDmContentCatchClick: null,
    // catch内容区域点击事件
    onDmThumbClick: null,
    // 头像区域点击事件
    onDmThumbCatchClick: null // catch头像区域点击事件
  },
  didMount: function didMount() {
    var _this$props = this.props,
      checked = _this$props.checked,
      checkable = _this$props.checkable,
      defaultChecked = _this$props.defaultChecked;
    if (checkable) {
      this.setData({
        checked: checked !== null ? checked : defaultChecked
      });
    }
    this._updateDataSet();
  },
  didUpdate: function didUpdate(preProps) {
    var _this$props2 = this.props,
      checkable = _this$props2.checkable,
      checked = _this$props2.checked,
      defaultChecked = _this$props2.defaultChecked;
    if (checkable && (preProps.checked !== checked || preProps.defaultChecked !== defaultChecked)) {
      this.setData({
        checked: preProps.checked !== checked ? checked : defaultChecked
      });
    }
    this._updateDataSet();
  },
  didUnmount: function didUnmount() {},
  methods: {
    _updateDataSet: function _updateDataSet() {
      this.dataset = {};
      for (var key in this.props) {
        if (/data-/gi.test(key)) {
          this.dataset[key.replace(/data-/gi, '')] = this.props[key];
        }
      }
    },
    handleCheckboxChange: function handleCheckboxChange(e) {
      var _this$props3 = this.props,
        onDmChange = _this$props3.onDmChange,
        dmId = _this$props3.dmId,
        onChange = _this$props3.onChange,
        id = _this$props3.id,
        defaultChecked = _this$props3.defaultChecked;
      var checked = this.data.checked;
      if (defaultChecked !== null) {
        this.setData({
          checked: !checked
        });
      }
      if (onChange) {
        onChange(id, !checked);
      } else if (onDmChange) {
        onDmChange({
          dmId: dmId,
          status: !checked
        }, e, this);
      }
    },
    onItemArrowTap: function onItemArrowTap(e) {
      var dataset = e.target.dataset;
      var dmId = dataset.dmId,
        id = dataset.id;
      var _this$props4 = this.props,
        onDmArrowClick = _this$props4.onDmArrowClick,
        onArrowTap = _this$props4.onArrowTap;
      if (onArrowTap) {
        onArrowTap(id);
      } else if (onDmArrowClick) {
        onDmArrowClick(dmId, e, this);
      }
    },
    onItemArrowCatchTap: function onItemArrowCatchTap(e) {
      var dataset = e.target.dataset;
      var dmId = dataset.dmId,
        id = dataset.id;
      var _this$props5 = this.props,
        onDmArrowCatchClick = _this$props5.onDmArrowCatchClick,
        onArrowCatchTap = _this$props5.onArrowCatchTap;
      if (onArrowCatchTap) {
        onArrowCatchTap(id);
      } else if (onDmArrowCatchClick) {
        onDmArrowCatchClick(dmId, e, this);
      }
    },
    onItemContentTap: function onItemContentTap(e) {
      var dataset = e.target.dataset;
      var dmId = dataset.dmId,
        id = dataset.id;
      var _this$props6 = this.props,
        onDmContentClick = _this$props6.onDmContentClick,
        onContentTap = _this$props6.onContentTap;
      if (onContentTap) {
        onContentTap(id);
      } else if (onDmContentClick) {
        onDmContentClick(dmId, e, this);
      }
    },
    onItemContentCatchTap: function onItemContentCatchTap(e) {
      var dataset = e.target.dataset;
      var dmId = dataset.dmId,
        id = dataset.id;
      var _this$props7 = this.props,
        onDmContentCatchClick = _this$props7.onDmContentCatchClick,
        onContentCatchTap = _this$props7.onContentCatchTap;
      if (onContentCatchTap) {
        onContentCatchTap(id);
      } else if (onDmContentCatchClick) {
        onDmContentCatchClick(dmId, e, this);
      }
    },
    onItemThumbTap: function onItemThumbTap(e) {
      var dataset = e.target.dataset;
      var dmId = dataset.dmId,
        id = dataset.id;
      var _this$props8 = this.props,
        onDmThumbClick = _this$props8.onDmThumbClick,
        onThumbTap = _this$props8.onThumbTap;
      if (onThumbTap) {
        onThumbTap(id);
      } else if (onDmThumbClick) {
        onDmThumbClick(dmId, e, this);
      }
    },
    onItemThumbCatchTap: function onItemThumbCatchTap(e) {
      var dataset = e.target.dataset;
      var dmId = dataset.dmId,
        id = dataset.id;
      var _this$props9 = this.props,
        onDmThumbCatchClick = _this$props9.onDmThumbCatchClick,
        onThumbCatchTap = _this$props9.onThumbCatchTap;
      if (onThumbCatchTap) {
        onThumbCatchTap(id);
      } else if (onDmThumbCatchClick) {
        onDmThumbCatchClick(dmId, e, this);
      }
    },
    onItemTap: function onItemTap(e) {
      var _e$target$dataset = e.target.dataset,
        dmId = _e$target$dataset.dmId,
        id = _e$target$dataset.id;
      var _this$props10 = this.props,
        onDmTap = _this$props10.onDmTap,
        checkable = _this$props10.checkable,
        disabled = _this$props10.disabled,
        onTap = _this$props10.onTap;
      if (checkable && !disabled) {
        this.handleCheckboxChange(e);
      }
      if (onTap) {
        onTap(id, {
          target: {
            dataset: this.dataset
          }
        });
      } else if (onDmTap) {
        onDmTap(dmId, e, this);
      }
    }
  }
});