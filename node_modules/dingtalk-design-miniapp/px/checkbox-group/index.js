"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
Component({
  mixins: [],
  data: {
    $uiName: 'checkbox-group',
    checkboxListsData: []
  },
  props: {
    className: '',
    checkboxLists: [],
    checkboxListsId: '',
    defaultValue: [],
    disabled: '',
    value: [],
    onChange: null,
    onDmChange: null
  },
  didMount: function didMount() {
    this.initData();
  },
  didUpdate: function didUpdate(preProps) {
    var _this$props = this.props,
      checkboxListsId = _this$props.checkboxListsId,
      defaultValue = _this$props.defaultValue,
      value = _this$props.value;
    if (checkboxListsId !== preProps.checkboxListsId || defaultValue !== preProps.defaultValue || value !== preProps.value) {
      this.initData();
    }
  },
  didUnmount: function didUnmount() {},
  methods: {
    initData: function initData() {
      var _this$props2 = this.props,
        checkboxLists = _this$props2.checkboxLists,
        defaultValue = _this$props2.defaultValue,
        value = _this$props2.value;
      if (!checkboxLists.length) {
        return;
      }

      // 首选 value ，次选 defaultValue
      var currVal = [];
      if (value && value.length) {
        currVal = value;
      } else if (defaultValue && defaultValue.length) {
        currVal = defaultValue;
      }
      checkboxLists.forEach(function (item) {
        if (currVal.indexOf(item.value) !== -1) {
          item.isChecked = true;
        } else {
          item.isChecked = false;
        }
      });
      this.setData({
        checkboxListsData: checkboxLists
      });
    },
    setCheckBox: function setCheckBox(index) {
      var disabled = this.props.disabled;
      var currData = this.data.checkboxListsData || [];
      // 如果是禁用状态
      if (disabled || currData[index].disabled) {
        return;
      }
      currData[index].isChecked = !currData[index].isChecked;
      this.setData({
        checkboxListsData: _toConsumableArray(currData)
      });
    },
    getCheckedVal: function getCheckedVal() {
      var currVal = [];
      (this.data.checkboxListsData || []).forEach(function (item) {
        item.isChecked && currVal.push(item.value);
      });
      return currVal;
    },
    onItemChange: function onItemChange(index) {
      var onChange = this.props.onChange;
      this.setCheckBox(index);
      if (onChange) {
        onChange(this.getCheckedVal(), index);
      }
    },
    onDmChange: function onDmChange(data, index, t) {
      var onDmChange = this.props.onDmChange;
      this.setCheckBox(index);
      if (onDmChange) {
        onDmChange(this.getCheckedVal(), (this.data.checkboxListsData || [])[index].value, index, data, t, this);
      }
    }
  }
});