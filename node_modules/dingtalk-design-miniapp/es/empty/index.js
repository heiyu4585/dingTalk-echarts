"use strict";

var _compI18nMin = _interopRequireDefault(require("./compI18n.min.js"));
var _config = require("./config");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
Component({
  mixins: [],
  data: {
    uiName: 'empty',
    describeArr: [],
    imgObj: {
      light: '',
      dark: ''
    },
    theme: 'light'
  },
  props: {
    className: '',
    style: '',
    locale: 'zh_CN',
    // en_US | zh_CN | zh_TW | zh_HK | ja_JP | ne_NP | th_TH | vi_VN | jd_ID
    type: 'default',
    img: '',
    // { light:'', dark:'' } | ''
    title: undefined,
    describe: undefined,
    // 支持自定义折行 在折行地方加入 <br/> 即可，只能最多在文中插入一个
    btnText: '',
    btnType: 'primary',
    inline: false,
    onTap: null
  },
  didMount: function didMount() {
    this.initData();
    this.initTheme();
  },
  didUpdate: function didUpdate(prevProps) {
    var _this$props = this.props,
      type = _this$props.type,
      locale = _this$props.locale,
      describe = _this$props.describe,
      img = _this$props.img,
      title = _this$props.title;
    if (type == 'defualt' || type !== prevProps.type || locale !== prevProps.locale || title !== prevProps.title || describe !== prevProps.describe || img !== prevProps.img) {
      this.initData();
    }
  },
  didUnmount: function didUnmount() {
    dd.offColorSchemeChange && dd.offColorSchemeChange();
  },
  methods: {
    onTap: function onTap(e) {
      var _this$props2 = this.props,
        onDmEmptyBtnTap = _this$props2.onDmEmptyBtnTap,
        onTap = _this$props2.onTap;
      if (onTap) {
        onTap(e);
      } else {
        onDmEmptyBtnTap(e, this);
      }
    },
    onDmEmptyLinkTap: function onDmEmptyLinkTap(e) {
      this.props.onDmEmptyLinkTap(e, this);
    },
    getEmptyPagePreset: function getEmptyPagePreset(type) {
      if (!type) {
        return {};
      }
      return _objectSpread({}, _config.TypeConfig.getTypeConfig(type));
    },
    initData: function initData() {
      var _this$props3 = this.props,
        type = _this$props3.type,
        locale = _this$props3.locale,
        describe = _this$props3.describe,
        img = _this$props3.img,
        title = _this$props3.title,
        btnName = _this$props3.btnName,
        linkText = _this$props3.linkText;
      _compI18nMin["default"].setLng(locale);
      var data = this.getEmptyPagePreset(type);
      var realTitle = title !== undefined ? title : data.title;
      var realDesc = describe !== undefined ? describe : data.describe;
      data = {
        img: img || data.img,
        title: realTitle,
        describe: realDesc,
        btnName: btnName || data.btnName
      };
      var describeArr = [];
      if (data.describe && data.describe.indexOf('<br/>') != -1) {
        describeArr = data.describe.split('<br/>').slice(0, 2);
      }
      var imgObj = null;
      if (data.img && typeof data.img === 'string') {
        imgObj = {
          light: data.img,
          dark: data.img
        };
      } else if (data.img && _typeof(data.img) === 'object' && (data.img.light || data.img.dark)) {
        imgObj = data.img;
      }
      this.setData(_objectSpread(_objectSpread({}, data), {}, {
        describeArr: describeArr,
        imgObj: imgObj
      }));
    },
    initTheme: function initTheme() {
      var _this = this;
      if (dd.canIUse('getColorSchemeSync')) {
        this.setData({
          theme: dd.getColorSchemeSync()
        });
      }
      dd.onColorSchemeChange && dd.onColorSchemeChange(function (res) {
        _this.setData({
          theme: res.colorScheme
        });
      });
    }
  }
});